{"version":3,"file":"main.min.js","mappings":"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","sources":["webpack://f5-persistence-cookie/./src/ts/main.ts","webpack://f5-persistence-cookie/./src/ts/decode-contents.ts","webpack://f5-persistence-cookie/./src/ts/encode-contents.ts","webpack://f5-persistence-cookie/./src/ts/engine/engine.ts","webpack://f5-persistence-cookie/webpack/bootstrap"],"sourcesContent":["import { DecodeContents } from \"./encode-contents\";\r\nimport { EncodeContents } from \"./decode-contents\";\r\n\r\nenum EMode {\r\n    NONE,\r\n    DECODE,\r\n    ENCODE,\r\n}\r\n\r\nfunction initialize(): void {\r\n    const decodeModeInput = document.getElementById(\"mode-0\") as HTMLInputElement;\r\n    const encodeModeInput = document.getElementById(\"mode-1\") as HTMLInputElement;\r\n\r\n    const decodeContents = new DecodeContents();\r\n    const encodeContents = new EncodeContents();\r\n\r\n    let mode = EMode.NONE;\r\n\r\n    function updateVisibility(): void {\r\n        const newMode = decodeModeInput.checked ? EMode.DECODE : EMode.ENCODE;\r\n\r\n        decodeContents.visibility = (newMode === EMode.DECODE);\r\n        encodeContents.visibility = (newMode === EMode.ENCODE);\r\n\r\n        if (mode === EMode.DECODE && newMode === EMode.ENCODE) {\r\n            const cookieValue = decodeContents.getEncoded();\r\n            if (cookieValue) {\r\n                encodeContents.cookieValue = cookieValue;\r\n            }\r\n        } else if (mode === EMode.ENCODE && newMode === EMode.DECODE) {\r\n            const cookiesInfo = encodeContents.getCookieInfos();\r\n            if (cookiesInfo) {\r\n                decodeContents.cookiesInfo = cookiesInfo;\r\n            }\r\n        }\r\n\r\n        mode = newMode;\r\n    }\r\n    decodeModeInput.addEventListener(\"change\", updateVisibility);\r\n    encodeModeInput.addEventListener(\"change\", updateVisibility);\r\n    updateVisibility();\r\n}\r\n\r\nwindow.addEventListener(\"load\", initialize);\r\n","import { type CookieInfos, encodeCookie, parseIp, decodeCookie } from \"./engine/engine\";\r\n\r\nclass EncodeContents {\r\n    private readonly container = document.getElementById(\"decode-contents\")!;\r\n    private readonly cookieValueInput = document.getElementById(\"cookie-value\") as HTMLInputElement;\r\n    private readonly routeDomainSpanContainer = document.getElementById(\"route-domain-span-container\") as HTMLElement;\r\n    private readonly routeDomainSpan = document.getElementById(\"route-domain-span\") as HTMLElement;\r\n    private readonly ipSpan = document.getElementById(\"ip-span\") as HTMLElement;\r\n    private readonly portSpan = document.getElementById(\"port-span\") as HTMLElement;\r\n\r\n    private cookieInfos: CookieInfos | null = null;\r\n\r\n    public constructor() {\r\n        const onChange = () => this.onChange();\r\n        this.cookieValueInput.addEventListener(\"change\", onChange);\r\n        this.cookieValueInput.addEventListener(\"keyup\", onChange);\r\n        this.onChange();\r\n    }\r\n\r\n    public getCookieInfos(): CookieInfos | null {\r\n        return this.cookieInfos;\r\n    }\r\n\r\n    public set visibility(visible: boolean) {\r\n        this.container.style.display = visible ? \"\" : \"none\";\r\n    }\r\n\r\n    public set cookieValue(cookieValue: string) {\r\n        this.cookieValueInput.value = cookieValue;\r\n        this.onChange()\r\n    }\r\n\r\n    private onChange(): void {\r\n        const cookieValue = this.cookieValueInput.value.trim();\r\n        this.cookieInfos = decodeCookie(cookieValue);\r\n\r\n        if (this.cookieInfos) {\r\n            this.ipSpan.textContent = this.cookieInfos.ip;\r\n            this.portSpan.textContent = this.cookieInfos.port.toFixed();\r\n\r\n            const hasRouteDomain = (typeof this.cookieInfos.routeDomain !== \"undefined\");\r\n            if (hasRouteDomain) {\r\n                this.routeDomainSpanContainer.style.display = \"\";\r\n                this.routeDomainSpan.textContent = this.cookieInfos.routeDomain!.toFixed();\r\n            } else {\r\n                this.routeDomainSpanContainer.style.display = \"none\";\r\n            }\r\n        } else {\r\n            this.ipSpan.textContent = \"<invalid input>\";\r\n            this.portSpan.textContent = \"<invalid input>\";\r\n            this.routeDomainSpanContainer.style.display = \"none\";\r\n        }\r\n    };\r\n}\r\n\r\nexport {\r\n    EncodeContents,\r\n};\r\n\r\n","import { type CookieInfos, encodeCookie, parseIp } from \"./engine/engine\";\r\n\r\nclass DecodeContents {\r\n    private readonly container = document.getElementById(\"encode-contents\")!;\r\n    private readonly enableRouteDomainCheckbox = document.getElementById(\"enable-route-domain\") as HTMLInputElement;\r\n    private readonly routeDomainInput = document.getElementById(\"route-domain\") as HTMLInputElement;\r\n    private readonly ipInput = document.getElementById(\"ip\") as HTMLInputElement;\r\n    private readonly portInput = document.getElementById(\"port\") as HTMLInputElement;\r\n    private readonly computedResultSpan = document.getElementById(\"computed-result\") as HTMLElement;\r\n\r\n    private encoded: string | null = null;\r\n\r\n    public constructor() {\r\n        const onChange = () => this.onChange();\r\n        this.enableRouteDomainCheckbox.addEventListener(\"change\", onChange);\r\n        this.routeDomainInput.addEventListener(\"change\", onChange);\r\n        this.routeDomainInput.addEventListener(\"keyup\", onChange);\r\n        this.ipInput.addEventListener(\"change\", onChange);\r\n        this.ipInput.addEventListener(\"keyup\", onChange);\r\n        this.portInput.addEventListener(\"change\", onChange);\r\n        this.portInput.addEventListener(\"keyup\", onChange);\r\n        this.onChange();\r\n    }\r\n\r\n    public getEncoded(): string | null {\r\n        return this.encoded;\r\n    }\r\n\r\n    public set visibility(visible: boolean) {\r\n        this.container.style.display = visible ? \"\" : \"none\";\r\n    }\r\n\r\n    public set cookiesInfo(cookieInfos: CookieInfos) {\r\n        if (typeof cookieInfos.routeDomain === \"number\") {\r\n            this.enableRouteDomainCheckbox.checked = true;\r\n            this.routeDomainInput.value = cookieInfos.routeDomain.toFixed();\r\n        } else {\r\n            this.enableRouteDomainCheckbox.checked = false;\r\n        }\r\n        this.ipInput.value = cookieInfos.ip;\r\n        this.portInput.value = cookieInfos.port.toFixed();\r\n        this.onChange();\r\n    }\r\n\r\n    private onChange(): void {\r\n        this.routeDomainInput.disabled = !this.enableRouteDomainCheckbox.checked;\r\n\r\n        this.encoded = null;\r\n\r\n        const rawIP = this.ipInput.value.trim();\r\n        if (parseIp(rawIP)) {\r\n            const cookieInfos: CookieInfos = {\r\n                ip: rawIP,\r\n                port: +this.portInput.value,\r\n            };\r\n            if (this.enableRouteDomainCheckbox.checked) {\r\n                cookieInfos.routeDomain = +this.routeDomainInput.value;\r\n            }\r\n            this.encoded = encodeCookie(cookieInfos);\r\n        }\r\n\r\n        this.computedResultSpan.textContent = this.encoded || \"<invalid input>\";\r\n    }\r\n}\r\n\r\nexport {\r\n    DecodeContents,\r\n};\r\n\r\n","// as described in https://my.f5.com/manage/s/article/K6917\r\n\r\nfunction decodeCookie(encoded: string): CookieInfos | null {\r\n    return decodeCookieNewFormat(encoded) || decodeCookieOldFormat(encoded);\r\n}\r\n\r\nfunction decodeCookieOldFormat(encoded: string): CookieInfos | null {\r\n    const match = encoded.match(/^([0-9]+)\\.([0-9]+).0000$/);\r\n    if (match) {\r\n        const encodedIP = +match[1]!;\r\n        const encodedPort = +match[2]!;\r\n\r\n        /* tslint:disable no-bitwise */\r\n        const ipAsArray = [\r\n            (encodedIP >> 0) & 0xFF,\r\n            (encodedIP >> 8) & 0xFF,\r\n            (encodedIP >> 16) & 0xFF,\r\n            (encodedIP >> 24) & 0xFF,\r\n        ];\r\n        const decodedIP = ipAsArray.join(\".\");\r\n        const decodedPort = (encodedPort >> 8) + ((encodedPort & 0xFF) << 8);\r\n\r\n        return {\r\n            ip: decodedIP,\r\n            port: decodedPort,\r\n        };\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction decodeCookieNewFormat(encoded: string): CookieInfos | null {\r\n    const match = encoded.match(/^rd([0-9]+)o00000000000000000000ffff([a-fA-F0-9]+)o([0-9]+)$/);\r\n    if (match) {\r\n        const routeDomain = +match[1]!;\r\n        const hexaIP = match[2]!;\r\n        const numericIP = Number(`0x${hexaIP}`);\r\n        const ipAsArray = [\r\n            (numericIP >> 24) & 0xFF,\r\n            (numericIP >> 16) & 0xFF,\r\n            (numericIP >> 8) & 0xFF,\r\n            (numericIP >> 0) & 0xFF,\r\n        ];\r\n        const decodedIP = ipAsArray.join(\".\");\r\n        const port = +match[3]!;\r\n\r\n        return {\r\n            ip: decodedIP,\r\n            port,\r\n            routeDomain,\r\n        };\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction parseIp(asString: string): [number, number, number, number] | null {\r\n    asString = asString.trim();\r\n    const match = asString.match(/^([0-9]+)\\.([0-9]+)\\.([0-9]+)\\.([0-9]+)$/);\r\n    if (!match) {\r\n        return null;\r\n    }\r\n\r\n    const parts: [number, number, number, number] = [\r\n        +match[1],\r\n        +match[2],\r\n        +match[3],\r\n        +match[4],\r\n    ];\r\n\r\n    for (const part of parts) {\r\n        if (isNaN(part) || part < 0 || part > 255) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    return parts;\r\n}\r\n\r\ntype CookieInfos = {\r\n    routeDomain?: number;\r\n    ip: string;\r\n    port: number;\r\n};\r\n\r\nfunction encodeCookie(infos: CookieInfos): string | null {\r\n    const parsedIp = parseIp(infos.ip);\r\n    if (parsedIp !== null) {\r\n        if (typeof infos.routeDomain === \"number\") {\r\n            const ipAsNumber = parsedIp[3] + 256 * (parsedIp[2] + 256 * (parsedIp[1] + 256 * parsedIp[0]));\r\n            const encodedIP = ipAsNumber.toString(16).padStart(8, \"0\");\r\n            return `rd${infos.routeDomain}o00000000000000000000ffff${encodedIP}o${infos.port}`;\r\n        } else {\r\n            const encodedIP = (parsedIp[0] + 256 * (parsedIp[1] + 256 * (parsedIp[2] + 256 * parsedIp[3]))).toFixed();\r\n            const encodedPort = (((infos.port & 0xFF) << 8) + ((infos.port >> 8) & 0xFF)).toFixed();\r\n            return `${encodedIP}.${encodedPort}.0000`;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nexport type {\r\n    CookieInfos,\r\n};\r\nexport {\r\n    decodeCookie,\r\n    encodeCookie,\r\n    parseIp,\r\n};\r\n\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n"],"names":["EMode","container","document","getElementById","cookieValueInput","routeDomainSpanContainer","routeDomainSpan","ipSpan","portSpan","cookieInfos","onChange","this","addEventListener","getCookieInfos","visible","style","display","cookieValue","value","trim","decodeCookie","textContent","ip","port","toFixed","routeDomain","EncodeContents","enableRouteDomainCheckbox","routeDomainInput","ipInput","portInput","computedResultSpan","encoded","getEncoded","checked","disabled","rawIP","parseIp","encodeCookie","DecodeContents","asString","match","parts","part","isNaN","hexaIP","numericIP","Number","join","decodeCookieNewFormat","encodedIP","encodedPort","decodeCookieOldFormat","infos","parsedIp","toString","padStart","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","window","decodeModeInput","encodeModeInput","decodeContents","encodeContents","mode","NONE","updateVisibility","newMode","DECODE","ENCODE","visibility","cookiesInfo"],"sourceRoot":""}